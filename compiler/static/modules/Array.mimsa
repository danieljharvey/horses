
export def reduce = 
  let arrayReduce f default as = 
    match as with [] -> default 
                | [a, ...rest] -> arrayReduce f (f a default) rest; 
  arrayReduce

export def reverse = reduce (\all -> \a -> [ all ] <> a) []

export def fmap f = reduce (\a -> \all -> all <> [ f a ]) []

export def map = fmap

export def filter pred = 
  reduce (\a -> \all -> if pred a then all <> [ a ] else all) []

export def find pred = 
  reduce (\item -> \total -> 
    match total with 
      (Maybe.Just found) -> (Maybe.Just found) 
    | _ -> (if (pred item) then (Maybe.Just item) else Maybe.Nothing)) 
    Maybe.Nothing
  
