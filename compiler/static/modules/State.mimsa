export type State s a = State (s -> (a, s))

def compose f g a = f (g a)

def fst pair = let (a,_) = pair in a

def snd pair = let (_,b) = pair in b

export def get = State (\s -> (s, s))

export def put s = State (\oldS -> (s, s)) 

export def pure a = State (\s -> (a, s))

export def fmap (f: a -> b) (state: State s a): State s b = 
  match state with (State sas) -> 
    State (\s -> 
        match sas s with (a, s) -> (f a, s)
    )

export def ap (stateF: State s (a -> b)) (stateA: State s a): State s b = 
  State (\s -> match stateF with (State sfs) -> let fs = sfs s; match fs with (f, ss) -> match stateA with (State sas) -> let as = sas ss; match as with (a, sss) -> (f a, sss))

export def bind f state = State (\s -> match state with (State sas) -> match (sas s) with (a, ss) -> match f a with (State sbs) -> sbs ss)

export def run state s = match state with (State sas) -> sas s

export def exec state = compose snd (run state)

export def eval state =  compose fst (run state)

export def liftA2 f stateA stateB = ap (fmap f stateA) stateB

