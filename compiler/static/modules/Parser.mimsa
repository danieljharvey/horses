export type Parser a = Parser (String -> Maybe.Maybe (a, String))

export def run parser str =
  match parser with (Parser p) -> 
      match p str with (Maybe.Just (a, _)) -> (Maybe.Just a) | _ -> (Maybe.Nothing)

export def fmap f parser = 
  Parser (\str -> match parser with (Parser p) -> 
      (match p str with 
          (Maybe.Just (a, rest)) -> (Maybe.Just ((f a,rest))) 
        | _ -> (Maybe.Nothing)))

export def ap parserF parserA = 
  let (Parser pF) = parserF;
  let (Parser pA) = parserA;
  Parser (\input -> match (pF input) with
    Maybe.Just (f, input2) -> (
      match (pA input2) with
        Maybe.Just (a, input3) -> Maybe.Just (f a, input3)
      | _ -> Maybe.Nothing)
  | _ ->  Maybe.Nothing)

export def bind f parser = 
  Parser (\input -> let (Parser firstP) = parser; match (firstP input) with (Maybe.Just (a, input2)) -> let (Parser secondP) = (f a); (secondP input2) | _ -> Maybe.Nothing)

export def anyChar = 
  Parser (\s -> match s with ch ++ rest -> (Maybe.Just ((ch, rest))) | _ -> (Maybe.Nothing))

export def pred predicate p = 
  Parser (\s -> let (Parser inner) = p; match inner s with (Maybe.Just (a, rest)) -> (if predicate a then (Maybe.Just ((a, rest))) else (Maybe.Nothing)) | _ -> (Maybe.Nothing))

export def alt = 
  let runParse p input = let (Parser pp) = p in (pp input); \p1 -> \p2 -> Parser (\input -> match (runParse p1 input) with (Maybe.Just a) -> (Maybe.Just a) | (Maybe.Nothing) -> (runParse p2 input))

export def char chr = pred (\c -> c == chr) anyChar

export def many parser = 
  let (Parser innerP) = parser; 
  (Parser (\input -> let go items i = match (innerP i) with (Maybe.Just (a, i2)) -> (go (items <> [ a ]) i2) | (Maybe.Nothing) -> (Maybe.Just ((items, i))); go [] input))

export def liftA2 f p1 =
  ap (fmap f p1)

export def left p1 p2 = liftA2 (\a -> \b -> a) p1 p2

export def right p1 p2 = liftA2 (\a -> \b -> b) p1 p2

export def some p = liftA2 NonEmptyArray.NonEmptyArray p (many p)

infix <|> = alt

export def whitespace = 
  char " " <|> char "\n" <|> char "\r"

export def space0 = fmap (Prelude.const Prelude.Unit) (many whitespace)

export def space1 = fmap (Prelude.const Prelude.Unit) (some whitespace)

export def sepBy sepP p = 
  let pairP = right sepP p; liftA2 NonEmptyArray.NonEmptyArray p (many pairP)

export def fail = Parser (Prelude.const Maybe.Nothing)
