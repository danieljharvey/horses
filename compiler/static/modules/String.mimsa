export def reduce = 
  let stringReduce = \f -> \default -> \str -> match str with "" -> default | head ++ tail -> stringReduce f (f default head) tail; stringReduce

export def fmap f =  
  reduce (\total -> \a -> total ++ f a) ""

export def filter pred = 
  reduce (\all -> \a -> if pred a then all ++ a else all) ""

export def split char str = 
  Array.reverse (reduce (\as -> \a -> if (a == char) then [ "" ] <> as else match as with [] -> [] | [current, ...rest] -> [ current ++ a ] <> rest) [""] str)

def mempty = ""

def mappend a b = a ++ b

export def monoid = { mempty, mappend } 

