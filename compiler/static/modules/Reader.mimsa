
export type Reader r a = Reader (r -> a)

export def run reader r =
  let (Reader ra) = reader in (ra r)

export def ask = Reader (Prelude.id)

export def local envF reader = 
  Reader (\r -> run reader (envF r))

export def ap readerF readerA = 
  let (Reader rToF) = readerF;
  let (Reader rToA) = readerA;
  (Reader (\r -> rToF r (rToA r)))

export def monoid innerM = 
  { mappend: \rA -> \rB -> Reader (\r -> innerM.append (run rA r) (run rB r)),
    mempty: Reader (\r -> innerM.empty)
  }

