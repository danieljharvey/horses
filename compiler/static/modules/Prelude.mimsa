export def id a = a

export def compose f g a = f (g a)

export def not a = if a then False else True

export def and a b = if a then b else False

export def or a b = if a then True else b
  
export def fst pair = let (a,_) = pair in a

export def snd pair = let (_,b) = pair in b

export def const a b = a

export type Unit = Unit

test "id does nothing" = id True == True

test "fst and snd work as expected" =
  let pair = (1,2);
  let newPair = (fst pair, snd pair);
  newPair == pair

test "const True 1 equals True" = const True 1

test "and True True equals True" =
  and True True

test "or False True equals True"
  = or False True

test "not False equals True"
  = not False

test "composing increment twice adds two"
  = let increment a = a + 1;
    let incrementTwice = compose increment increment;
    incrementTwice 40 == 42
