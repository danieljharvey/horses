type State s a = State (s -> (a, s))

def pure (a: a) : State s a {
  State (\s -> (a, s))
}

def get : State s s {
  State (\s -> (s, s))
}

def put (s: s) : State s Unit {
  State (\oldS -> (Unit, s))
}

def fmap (f: a -> b) (state: State s a) : State s b {
  let State sas = state;

  State (\s -> let (a, s) = (sas s) in ((f a), s))
}

def ap (stateF: State s (a -> b)) (stateA: State s a) : State s b {
  State (\s ->
    let State sfs = stateF;

    let fs = 
      sfs s;

    let (f, ss) = fs;

    let State sas = stateA;

    let as = sas ss in let (a, sss) = as in ((f a), sss))
}

def bind (f: a -> State s b) (state: State s a) : State s b {
  State (\s ->
    let State sas = state;

    let (a, ss) = (sas s);

    let State sbs = (f a);

    sbs ss)
}

def run (state: State s a) (s: s) : (a, s) {
  let State sas = state;

  sas s
}

