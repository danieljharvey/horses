type Maybe a = Just a | Nothing

def fromMaybe (val: Maybe a) (fallback: a) : a {
  case val {
    Just a ->
       a,
    _ ->
       fallback
  }
}

def fmap (f: a -> b) (maybeA: Maybe a) : Maybe b {
  case maybeA {
    Just a ->
       Just (f a),
    _ ->
       Nothing
  }
}

test "fmap id does nothing" {
  let id a = a in (fromMaybe (fmap id (Just True)) False) == True
}

