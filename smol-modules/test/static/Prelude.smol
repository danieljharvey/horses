def id (a: a) : a {
  a
}

def compose (f: b -> c) (g: a -> b) (a: a) : c {
  f (g a)
}

def not (a: Bool) : Bool {
  if a then False else True
}

def and (a: Bool) (b: Bool) : Bool {
  if a then b else False
}

def or (a: Bool) (b: Bool) : Bool {
  if a then True else b
}

def fst (pair: (a, b)) : a {
  let (a, _) = pair;

  a
}

def snd (pair: (a, b)) : b {
  let (_, b) = pair;

  b
}

def const (a: a) (b: b) : a {
  a
}

type Identity a = Identity a

def runIdentity (identity: Identity a) : a {
  let Identity a = identity;

  a
}

