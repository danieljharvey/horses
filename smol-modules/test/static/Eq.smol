class Eq a { equals: a -> a -> Bool }

instance Eq Int {
  \a -> \b -> a == b
}

instance Eq Bool {
  \a -> \b -> a == b
}

instance Eq String {
  \a -> \b -> a == b
}

instance (Eq a, Eq b) => Eq (a, b) {
  \pairA ->
    \pairB ->
      let ((a1, b1), (a2, b2)) = ((pairA, pairB));

      if (equals a1 a2) then (equals b1 b2) else False
}

type Maybe a = Just a | Nothing

instance (Eq a) => Eq Maybe a {
  \a ->
    \b ->
      case ((a, b)) {
        (Just a, Just b) ->
           equals a b,
        (Nothing, Nothing) ->
           True,
        _ ->
           False
      }
}

def useEqualsInt : Bool {
  equals (1 : Int) (2 : Int)
}

def useEqualsA (Eq a) => (a: a) (b: a) : Bool {
  equals a b
}

def notEquals (Eq a) => (a: a) (b: a) : Bool {
  if (useEqualsA a b) then False else True
}

def pair : (Int, Int) {
  (1, 2)
}

def flipPair (pair: (a, b)) : (b, a) {
  let (a, b) = pair;

  (b, a)
}

def main : Bool {
  notEquals pair (flipPair pair)
}

def useMaybe : Bool {
  equals Nothing (Just (1 : Int))
}

def useNewInstances : Bool {
  if (equals (True : Bool) (False : Bool))
  then
    (equals ("dog" : String) ("log" : String))
  else
    False
}

