type Expr ann = EAdd ann (Expr ann) (Expr ann) | ENumber ann Int

def run (expr: Expr ann) : Int {
  case expr {
    ENumber _ i ->
       i,
    EAdd _ _ _ ->
       100
  }
}

def run2 (expr: Expr ann) : Int {
  let go inner = 
    case inner {
      ENumber _ i ->
         i,
      EAdd _ a b ->
       {
         let gA = go a in let gB = go b in gA + gB 
      }
    };

  go expr
}

def main : Int {
  run (EAdd Unit (ENumber Unit 1) (ENumber Unit 41))
}

