type Tree a = Branch (Tree a) a (Tree a) | Leaf a

def fmap (f: a -> b) : (Tree a) -> Tree b {
  let map innerTree = 
    case innerTree {
      Branch left a right ->
         Branch (map left) (f a) (map right),
      Leaf a ->
         Leaf (f a)
    };

  map
}

def invert : (Tree a) -> Tree b {
  let invertTree innerTree = 
    case innerTree {
      Branch left a right ->
         Branch (invertTree right) a (invertTree left),
      Leaf a ->
         Leaf a
    };

  invertTree
}

