export type Tree a = Branch (Tree a) a (Tree a) | Leaf a

export def fmap f =
  let map innerTree = 
    match innerTree with
      (Branch left a right) -> Branch (map left) (f a) (map right)
    | (Leaf a) -> Leaf (f a)
  in map

export def invert =
  let invertTree innerTree = 
    match innerTree with 
      (Branch left a right) -> Branch (invertTree right) a (invertTree left) 
    | (Leaf a) -> Leaf a
  in invertTree

