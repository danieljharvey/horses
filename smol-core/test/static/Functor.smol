class Functor f { fmap: (a -> b) -> (f a) -> f b }

type Identity a = Identity a

instance Functor Identity {
  \f -> \Identity a -> Identity (f a)
}

test "fmap works with Identity" {
  let runIdentity identity = 
    let Identity a = identity;

    a;

  let inc = 
    (\a -> a + 1 : Int -> Int);

  let result = 
    runIdentity (fmap inc (Identity (1 : Int)));

  let expected = 
    runIdentity (Identity (2 : Int));

  (result : Int) == (expected : Int)
}

type Maybe a = Just a | Nothing

instance Functor Maybe {
  \f -> \maybe -> case maybe { Just a -> (Just (f a)), Nothing -> Nothing }
}

test "fmap works with Just" {
  let unwrapMaybe maybe = 
    case maybe {
      Just a ->
         a,
      Nothing ->
         0
    };

  let inc = 
    (\a -> a + 1 : Int -> Int);

  (unwrapMaybe (fmap inc (Just 1))) == (unwrapMaybe (Just (2 : Int)))
}

type List a = Cons a (List a) | Nil

instance Functor List {
  \f ->
    \list -> case list { Cons a rest -> (Cons (f a) (fmap f rest)), Nil -> Nil }
}

test "fmap works with List" {
  let listHead list = 
    case list {
      Cons a _ ->
         a,
      Nil ->
         0
    };

  let inc = 
    (\a -> a + 1 : Int -> Int);

  (listHead (fmap inc (Cons 1 Nil))) == (listHead (Cons (2 : Int) Nil))
}

type Either e a = Left e | Right a

instance Functor Either e {
  \f -> \either -> case either { Right a -> (Right (f a)), Left e -> (Left e) }
}

test "fmap works with Either" {
  let unwrapEither either = 
    case either {
      Right a ->
         a,
      _ ->
         0
    };

  let inc = 
    (\a -> a + 1 : Int -> Int);

  (unwrapEither (fmap inc (Right 1))) == (unwrapEither (Right (2 : Int)))
}

