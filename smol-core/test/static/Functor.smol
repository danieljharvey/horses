class Functor f { fmap : (a -> b) -> f a -> f b }

/* Maybe */
type Maybe a = Just a | Nothing

instance Functor Maybe =
    \f -> \maybe -> case maybe of Just a -> Just (f a) | Nothing -> Nothing

test "fmap works with Just" =
    let unwrapMaybe = \maybe -> case maybe of
        Just a -> a | Nothing -> 0;
    let inc = (\a -> a + 1 : Int -> Int);
    unwrapMaybe (fmap inc (Just 1)) == unwrapMaybe (Just (2 : Int))

/* List */
type List a = Cons a (List a) | Nil

instance Functor List =
    \f -> \list -> case list of
                Cons a rest -> Cons (f a) (fmap f rest)
                | Nil -> Nil

test "fmap works with List" =
    let listHead = \list -> case list of
        Cons a _ -> a | Nil -> 0;
    let inc = (\a -> a + 1 : Int -> Int);
    listHead (fmap inc (Cons 1 Nil)) == listHead (Cons (2 : Int) Nil)

/* Either */

type Either e a = Right a | Left e

instance Functor (Either e) =
    \f -> \either -> case either of
                        Right a -> Right (f a)
                      | Left e -> Left e

test "fmap works with Either" using testFmapEither
    let unwrapEither = \either -> case either of
        Right a -> a | _ -> 0;
    let inc = (\a -> a + 1 : Int -> Int);
    unwrapEither (fmap inc (Right 1)) == unwrapEither (Right (2 : Int))

