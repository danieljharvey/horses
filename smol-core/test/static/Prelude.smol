export def id (a: a): a = a

export def compose (f: b -> c) (g: a -> b) (a: a): c = f (g a)

def fart (a: 1 | 2): Bool = case a + 2 of
                        3 -> True
                    |   4 -> False
                    |   5 -> False

export def not a = if a then False else True

export def and a b = if a then b else False

export def or a b = if a then True else b

export def fst (pair: (a,b)): a = case pair of (a,_) -> a

export def snd (pair: (a,b)): b = case pair of (_,b) -> b

export def const a b = a

export type Identity a = Identity a

export def runIdentity identity = case identity of Identity a -> a
