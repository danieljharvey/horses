def id : a -> a
def id a = a

def compose :
  (b -> c) ->
  (a -> b) ->
  (a -> c)
def compose f g a = f (g a)

def not : Bool -> Bool
def not a = if a then False else True

def and : Bool -> Bool -> Bool
def and a b = if a then b else False

def or : Bool -> Bool -> Bool
def or a b = if a then True else b

def fst : (a, b) -> a
def fst pair = case pair of (a, _) -> a

def snd : (a, b) -> b
def snd pair = case pair of (_, b) -> b

def const : a -> b -> a
def const a b = a

type Identity a = Identity a

def runIdentity : Identity a -> a
def runIdentity identity = case identity of Identity a -> a

