type Tree a = Branch (Tree a) a (Tree a) | Leaf a

def fmap : 
  (a -> b) -> (Tree a) -> Tree b
def fmap f =
  let map innerTree =
    case innerTree of 
        Branch left a right ->   (Branch (map left) (f a) (map right))
      | Leaf a ->   (Leaf (f a));

  map

def invert : 
  (Tree a) -> Tree b
def invert =
  let invertTree innerTree =
    case innerTree of 
        Branch left a right ->   (Branch (invertTree right) a (invertTree left))
      | Leaf a ->   (Leaf a);

  invertTree

