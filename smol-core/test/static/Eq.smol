def useEqualsInt : Bool
def useEqualsInt = equals (1: Int) (2: Int)

def useEqualsA : (Eq a) => a -> a -> Bool
def useEqualsA a b = equals a b

def notEquals : (Eq a) => a -> a -> Bool
def notEquals a b = if useEqualsA a b then False else True

def pair : (Int,Int)
def pair = (1,2)

def flipPair : (a,b) -> (b, a)
def flipPair pair = case pair of (a,b) -> (b,a)

def main : Bool
def main = notEquals pair (flipPair pair)

instance Eq Bool = \a -> \b -> a == b

instance Eq String = \a -> \b -> a == b

def useNewInstances : Bool
def useNewInstances = if equals (True : Bool) (False : Bool)
                      then equals ("dog" : String) ("log" : String)
                      else False
