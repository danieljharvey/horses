
type Reader r a = Reader (r -> a)

def run : Reader (r -> a) -> r -> a
def run reader r =
  case reader of (Reader ra) -> ra r

/*

// this breaks typechecking with
// Unification error! Expected matching types but found (U2 -> U3) -> Reader U2 U3 and Reader.
def ask : Reader (r -> r)
def ask = let id = \a -> a in Reader id

def local : (r -> r) -> Reader (r -> a) -> Reader (r -> a)
def local envF reader =
  Reader (\r -> run reader (envF r))

def ap : Reader (r -> a -> b) -> Reader (r -> a) -> Reader (r -> b)
def ap readerF readerA =
  case (readerF, readerA) of
    (Reader rToF, Reader rToA) ->
      Reader (\r -> rToF r (rToA r))

def monoid innerM =
  { mappend: \rA -> \rB -> Reader (\r -> innerM.append (run rA r) (run rB r)),
    mempty: Reader (\r -> innerM.empty)
  }
*/
