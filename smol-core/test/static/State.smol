type State s a = State (s -> (a, s))

def pure : 
  a -> State s a
def pure a =
  State (\s -> (a, s))

def get : 
  State s s
def get =
  State (\s -> (s, s))

def put : 
  s -> State s Unit
def put s =
  State (\oldS -> (Unit, s))

def fmap : 
  (a -> b) -> (State s a) -> State s b
def fmap f state =
  case state of 
      State sas ->   (State (\s -> case (sas s) of    (a,  s) -> (((f a), s))))

def ap : 
  (State s (a -> b)) -> (State s a) -> State s b
def ap stateF stateA =
  State (\s ->
    case stateF of 
        State sfs ->   (let fs =
                         sfs s;

                       case fs of 
                           (f,  ss) ->   (case stateA of 
                                             State sas ->   (let as =
                                                              sas ss;

                                                            case as of 
                                                                (a,  sss) ->
                                                                (((f a),
                                                                  sss))))))

def bind : 
  (a -> State s b) -> (State s a) -> State s b
def bind f state =
  State (\s ->
    case state of 
        State sas ->   (case (sas s) of 
                           (a,  ss) ->   (case (f a) of 
                                             State sbs ->   (sbs ss))))

def run : 
  (State s a) -> s -> (a, s)
def run state s =
  case state of 
      State sas ->   (sas s)

