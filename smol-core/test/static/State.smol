type State s a = State (s -> (a, s))

def pure : 
  a -> State s a
def pure a =
  State (\s -> (a, s))

def get : 
  State s s
def get =
  State (\s -> (s, s))

def put : 
  s -> State s Unit
def put s =
  State (\oldS -> (Unit, s))

def fmap : 
  (a -> b) -> (State s a) -> State s b
def fmap f state =
  let State sas = state;

  State (\s -> let (a, s) = (sas s) in ((f a), s))

def ap : 
  (State s (a -> b)) -> (State s a) -> State s b
def ap stateF stateA =
  State (\s ->
    let State sfs = stateF;

    let fs = 
      sfs s;

    let (f, ss) = fs;

    let State sas = stateA;

    let as = sas ss in let (a, sss) = as in ((f a), sss))

def bind : 
  (a -> State s b) -> (State s a) -> State s b
def bind f state =
  State (\s ->
    let State sas = state;

    let (a, ss) = (sas s);

    let State sbs = (f a);

    sbs ss)

def run : 
  (State s a) -> s -> (a, s)
def run state s =
  let State sas = state;

  sas s

