class Eq a { equals: a -> a -> Bool }

instance Eq Int =
  \a -> \b -> a == b

class Semigroup a { mappend: a -> a -> a }

instance Semigroup Int =
  \a -> \b -> a + a

type First a = First a

def runFirst : 
  (First a) -> a
def runFirst firstA =
  case firstA {
    First a -> a
  }

instance Semigroup First a =
  \a -> \b -> a

def true : 
  Bool
def true =
  runFirst (mappend (First (True : Bool)) (First (False : Bool)))

def main : 
  Bool
def main =
  equals (mappend (20 : Int) (22 : Int)) (42 : Int)

