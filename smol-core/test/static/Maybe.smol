type Maybe a = Just a | Nothing

def fromMaybe : 
  (Maybe a) -> a -> a
def fromMaybe val fallback =
  case val {
      Just a ->   a,
      _ ->   fallback
  }

def fmap : 
  (a -> b) -> (Maybe a) -> Maybe b
def fmap f maybeA =
  case maybeA {
      Just a ->   (Just (f a)),
      _ ->   Nothing
  }

test "fmap id does nothing" =
  let id a = a in (fromMaybe (fmap id (Just True)) False) == True

