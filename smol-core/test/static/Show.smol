
class Show a { show: a -> String }

instance Show Bool = \bool ->
    if bool then "True" else "False"

def showTrue =
    show (True: Bool) == "True"

test "Show True" using showTrue

def showFalse = show (False: Bool) == "False"

test "Show False" using showFalse

type Natural = Suc Natural | Zero

instance Show Natural = \nat -> case nat of
                                Suc n -> "S (" + show n + ")"
                                | Zero -> "Z"

def showZero = show Zero == "Z"

test "Show Zero" using showZero

def showThree =
        show (Suc (Suc (Suc Zero))) == "S (S (S (Z)))"

test "Show Three" using showThree
