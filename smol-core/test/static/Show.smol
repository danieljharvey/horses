class Show a { show: a -> String }

instance Show Bool =
  \bool -> if bool then "True" else "False"

test "Show True" =
  (show (True : Bool)) == "True"

test "Show False" =
  (show (False : Bool)) == "False"

type Natural  = Suc Natural | Zero

instance Show Natural =
  \nat -> case nat { Suc n -> "S (" + (show n) + ")", Zero -> "Z" }

test "Show Zero" =
  (show Zero) == "Z"

test "Show Three" =
  (show (Suc (Suc (Suc Zero)))) == "S (S (S (Z)))"

type List a = Cons a (List a) | Nil

instance(Show a) => Show List a =
  \list ->
    case list {
        Cons a rest ->   (show a) + ":" + (show rest),
        Nil ->   "Nil"
    }

def showBoolList =
  (show (Cons (True : Bool) (Cons (False : Bool) Nil))) == "True:False:Nil"

test "Show Bool List" =
  showBoolList

def showNaturalList =
  (show (Cons (Suc Zero) (Cons Zero Nil))) == "S (Z):Z:Nil"

test "Show Natural List" =
  showNaturalList

